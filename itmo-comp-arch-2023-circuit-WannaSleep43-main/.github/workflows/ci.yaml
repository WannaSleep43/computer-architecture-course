name: CI/CD

on:
  workflow_dispatch:  
    inputs:
      check_pdf:
        description: "Отчёт (галочка для проверяющего)"
        default: false
        type: boolean
      logical:
        description: "Test stack_logical"
        default: false
        type: boolean
      l_var:
        description: "stack_logical mode"
        default: 'normal'
        type: choice
        options: 
        - 'normal'
        - 'easy'

      structural:
        description: "Test stack_structural"
        default: false
        type: boolean
      s_var:
        description: "stack_structural mode"
        default: 'normal'
        type: choice
        options: 
        - 'normal'
        - 'easy'
        
      behaviour:
        description: "Test stack_behaviour"
        default: false
        type: boolean
      b_var:
        description: "stack_behaviour mode"
        default: 'normal'
        type: choice
        options: 
        - 'normal'
        - 'easy'

defaults:
  run:
    shell: pwsh
    
jobs:
  buildtest:
    if: (github.actor == 'RonoveRaum') || (github.run_number < 21)    
    runs-on: ubuntu-22.04
    timeout-minutes: 4

    steps:
      - uses: actions/checkout@v3
      
      - name: install_deps
        id: install_deps
        shell: pwsh
        run: |  
          echo "# Parameters" >> $env:GITHUB_STEP_SUMMARY
          echo " Проверка отчёта - check_pdf: $${{ inputs.check_pdf }}" >> $env:GITHUB_STEP_SUMMARY
          echo " stack_logical - <${{ inputs.l_var }}>: $${{ inputs.logical }}" >> $env:GITHUB_STEP_SUMMARY
          echo " stack_structural - <${{ inputs.s_var }}>: $${{ inputs.structural }}" >> $env:GITHUB_STEP_SUMMARY
          echo " stack_behaviour - <${{ inputs.b_var }}>: $${{ inputs.behaviour }}" >> $env:GITHUB_STEP_SUMMARY
          
          cd .github/workflows/   
          sudo dpkg -i iverilog_12.0-2_amd64.deb
          $version = $(iverilog -v) -join "`n"
          
          $ErrorActionPreference = 'SilentlyContinue'
          echo "# iverilog" >> $env:GITHUB_STEP_SUMMARY      
            echo '```' >> $GITHUB_STEP_SUMMARY
            "$version">> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY            
          echo $version
          exit 0
          
      - name: build_structural
        id: build_structural
        if: inputs.structural
        run: |  
          echo "# build_structural" >> $env:GITHUB_STEP_SUMMARY     
          try {
            $ErrorActionPreference = 'SilentlyContinue'
            pwsh -Command { iverilog -g2012 -o stack_structural_tb.out stack_structural_${{inputs.s_var}}_tb.sv *>&1 > log.txt }       
          } catch {
            Write-Output "❌ build failed!"
          } 
          
          $bec = $LastExitCode
          echo "bec=$($bec)" >> $env:GITHUB_OUTPUT  
          echo "build_structural exit code: $($bec)">> $env:GITHUB_STEP_SUMMARY 
          
          $log="$(Get-Content log.txt -Raw)"
          echo "blog=$($log)" >> $env:GITHUB_OUTPUT 
          echo "$($log)"
          echo "build_structural build log:">> $env:GITHUB_STEP_SUMMARY         
            echo '```' >> $env:GITHUB_STEP_SUMMARY        
            "$log" >> $env:GITHUB_STEP_SUMMARY        
            echo '```' >> $env:GITHUB_STEP_SUMMARY
                 
      - name: build_behaviour
        id: build_behaviour
        if: inputs.behaviour
        run: |  
          echo "# build_behaviour" >> $env:GITHUB_STEP_SUMMARY  
          try {
            $ErrorActionPreference = 'SilentlyContinue'
            pwsh -Command { iverilog -g2012 -o stack_behaviour_tb.out stack_behaviour_${{inputs.b_var}}_tb.sv *>&1 > log.txt } 
          } catch {
            Write-Output "❌ build failed!"
          } 
          
          $bec = $LastExitCode
          echo "bec=$($bec)" >> $env:GITHUB_OUTPUT  
          echo "build_behaviour exit code: $($bec)">> $env:GITHUB_STEP_SUMMARY 

          $log=Get-Content log.txt -Raw
          echo "blog=$($log)" >> $env:GITHUB_OUTPUT 
          echo "$($log)"
          echo "build_structural build log:">> $env:GITHUB_STEP_SUMMARY         
            echo '```' >> $env:GITHUB_STEP_SUMMARY      
            "$log" >> $env:GITHUB_STEP_SUMMARY          
            echo '```' >> $env:GITHUB_STEP_SUMMARY
          
      - name: test_logical
        id: test_logical
        if: inputs.logical
        run: |  
          echo "# test_logical" >> $env:GITHUB_STEP_SUMMARY  
          
          #TODO

          echo "test_logical test log:">> $env:GITHUB_STEP_SUMMARY         
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "$log" >> $env:GITHUB_STEP_SUMMARY           
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            echo "⚠️ PASSED (check manualy)" >> $env:GITHUB_STEP_SUMMARY 
            echo '```' >> $env:GITHUB_STEP_SUMMARY      
          exit(0)
            
      - name: test_structural
        id: test_structural
        if: inputs.structural && (steps.build_structural.outputs.bec==0)
        run: |  
          echo "# test_structural" >> $env:GITHUB_STEP_SUMMARY  
          
          $log=$(vvp stack_structural_tb.out +TIMES=3 +OUTCSV=st_structural_3.csv)

          cd .github/workflows/
          python "verilog_checker.py" "ref_stack_3.csv" "../../st_structural_3.csv" > "stdout.log"
          $verdict = $LastExitCode
          $log = Get-Content "stdout.log" -Raw

          echo "tlog=$($log)" >> $env:GITHUB_OUTPUT 
          echo $log
          echo "test_structural test log:">> $env:GITHUB_STEP_SUMMARY         
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "$log" >> $env:GITHUB_STEP_SUMMARY           
            echo '```' >> $env:GITHUB_STEP_SUMMARY
          if ($verdict -eq 0) 
          {         
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "Result:✅ PASSED`n" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY 
          }
          else
          {
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "Result:❌ FAILED`n$verdict" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY 
          }  
          exit(0)
          
      - name: test_behaviour
        id: test_behaviour
        if: inputs.behaviour && (steps.build_behaviour.outputs.bec==0)
        run: |  
          echo "# test_behaviour" >> $env:GITHUB_STEP_SUMMARY  
          
          $log=$(vvp stack_behaviour_tb.out +TIMES=3 +OUTCSV=st_behaviour_3.csv)

          cd .github/workflows/
          python "verilog_checker.py" "ref_stack_3.csv" "../../st_behaviour_3.csv" > "stdout.log"
          $verdict = $LastExitCode
          $log = Get-Content "stdout.log" -Raw

          echo "tlog=$($log)" >> $env:GITHUB_OUTPUT 
          echo $log
          echo "test_behaviour test log:">> $env:GITHUB_STEP_SUMMARY         
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "$log" >> $env:GITHUB_STEP_SUMMARY           
            echo '```' >> $env:GITHUB_STEP_SUMMARY
          if ($verdict -eq 0) 
          {         
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "Result:✅ PASSED`n" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY 
          }
          else
          {
            echo '```' >> $env:GITHUB_STEP_SUMMARY     
            "Result:❌ FAILED`n$verdict" >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY 
          }  
          exit(0)     
          
